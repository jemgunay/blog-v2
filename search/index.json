[{"content":"See the GitHub repository here.\nI\u0026rsquo;m a massive fan of the Box2D physics engine and have wielded it in a few languages as part of game and simulation projects. I spotted a Go port and wanted to somehow combine this with the Pixel 2D game library and decided this top-down car demo written in JS with Box2D would be a fun base to start with. So, I went ahead and migrated it to Go with Pixel \u0026amp; Box2D, adding enhancements such as vehicle health and destruction.\nI\u0026rsquo;d studied evolutionary algorithms at uni but had never actually implemented them. I decided to encode the car\u0026rsquo;s movements as a genetic sequence, and iteratively evolve the car\u0026rsquo;s performance in order to solve a basic problem. The car evolves to drive to and gracefully brake on a green target point. It uses roulette wheel selection combined with random cross-overs, swaps and mutations to produce the following generation. The fitness function is a combination of the distance from the target and the final velocity at the end of the sequence execution to encourage the car to precisely park on the target rather than speed over it.\nThe following video illustrates the improvement in fitness between evolutionary iterations. I\u0026rsquo;ve also included a surprising solution which evolved after hundreds of iterations, showing how machine learning and evolution in general can provide interesting and less obvious solutions\u0026hellip;\n","date":"2020-09-10T00:00:00Z","image":"https://jemgunay.co.uk/p/evolutionary-driving-with-genetic-algorithms/preview_hu12102441183157675777.png","permalink":"https://jemgunay.co.uk/p/evolutionary-driving-with-genetic-algorithms/","title":"Evolutionary Driving with Genetic Algorithms"},{"content":"See the GitHub repository here.\nI created an Amazon Alexa skill server in Golang for controlling window blinds. It works by receiving instructions from Alexa utterances via AWS, which in turn trigger motors controlled via a Raspberry Pi Zero\u0026rsquo;s GPIO pins. These motors then pull the window blinds cords to rotate and pull them open. The motors and blinds cords were mounted to a 3D printed chassis, of which the models were precisely designed in Blender.\n","date":"2020-09-08T00:00:00Z","image":"https://jemgunay.co.uk/p/controlling-window-blinds-with-alexa/preview_hu13117503897734074854.png","permalink":"https://jemgunay.co.uk/p/controlling-window-blinds-with-alexa/","title":"Controlling Window Blinds with Alexa"},{"content":"See the GitHub repository here.\nI was keen to apply my Golang experience to the world of game development, of which I\u0026rsquo;d explored in several other languages. I came across the Pixel 2D game library and wanted to combine it with the powerful concurrency model and networking packages that Go provides out of the box. The result was a multiplayer procedural terrain game consisting of:\nA seedable procedural world generator implemented with Perlin noise. Worlds consist of grassy mainland, bodies of water, sandy beaches, and a dynamically generated road network. Ability to host multiplayer worlds for other players to join over TCP. A basic weapons inventory and ammo system, with the ability to shoot other players. A flexible and responsive menu system with buttons, text inputs and scroll bars. Water wave shaders. ","date":"2020-09-07T00:00:00Z","image":"https://jemgunay.co.uk/p/multiplayer-procedural-game-demo/preview_hu14947472292996594882.png","permalink":"https://jemgunay.co.uk/p/multiplayer-procedural-game-demo/","title":"Multiplayer Procedural Game Demo"},{"content":"See the GitHub repository here.\nliteboard is a flexible, lightweight and open-source course management system developed for courses and schools which do not have access to alternative paid learning tools such as Blackboard or Moodle. The high school sixth form where my mum teaches at is an example of such a school, whose resources are limited to a local network shared documents system which offers little structure or clarity; in addition, students cannot access this system from home. \u0026rsquo;liteboard' overcomes these limitations and is currently being successfully trialled by the school\u0026rsquo;s sociology department.\nThe following features are supported:\nCategorised homepage alerts and news article posts for extended reading. Year plan/calendar with multiple views (year/month/week/day). Customisable nested folder functionality for organising uploaded files and written descriptions (including description formatting tools). Login portal for \u0026lsquo;Student\u0026rsquo; and \u0026lsquo;Teacher\u0026rsquo; accounts; the latter offers administrator controls for creating and modifying content. Account log in and download counters to provide a rough estimate of how many students are using the system. Slick and responsive user interface design - information is displayed very cleanly on mobile (see below). This comprehensive feature set allows teachers to organise their files and other course content in an organised fashion, facilitates the presentation of important dates and notes for students and fellow teachers and can be accessed any the majority of desktop, tablet and mobile devices at school or from home; for example, this is useful for students who have missed lessons due to illness, providing them with the means to catch up with missed lessons from home.\nThe project was developed in PHP with the Fat-Free Framework (F3) for the back end. HTML, CSS (with Bootstrap) and Javascript/jQuery were used for the front end functionality. The application files can be found on GitHub (link at the bottom) where installation instructions are provided.\nScreenshots on desktop:\nScreenshots demonstrating the responsive design on mobile:\n","date":"2017-09-26T13:00:00Z","image":"https://jemgunay.co.uk/p/liteboard-course-management-system/preview_hu8265913335897899207.png","permalink":"https://jemgunay.co.uk/p/liteboard-course-management-system/","title":"liteboard Course Management System"},{"content":"See the GitHub repository here.\nFor my university third year dissertation project, I developed a computer vision-orientated application for detecting and classifying bottles from a camera stream or image frame, as well as displaying appropriate cocktail recipes based on the classified bottles in an aesthetically pleasing web page.\nThis was achieved using trained HAAR/LBP cascades (using the OpenCV implementations) for detection and colour histograms generated from detected regions of interest to improve classification performance. The applications were written primarily in Python utilising a wide number of libraries (list can be seen on GitHub repository), though web languages were also used for rendering the resolved recipes. The tool currently classifies Smirnoff Vodka and Jack Daniel\u0026rsquo;s bottles, as well as Red Bull cans, Monster Energy cans and an orange juice carton. MySQL was used to store the scraped cocktail recipes.\nSeveral command line tools were developed which allow the flexible execution and maintenance of the tool:\nRecipe Scraper: used to scrape a recipe by name or multiple recipes by ingredient name from a cocktail recipe website into the database. Histogram Generator: used to generate specially formatted histogram files which represent the colour spectrum of the target image. Main Application: used to perform classification of the target image frame or camera stream. Also used to resolve the cocktail recipes and to launch the web server for hosting the recipe view render. Screenshots of the classification of bottles from a live webcam feed:\nScreenshots of the cocktail recipe lists resolved from classified bottles:\n","date":"2017-09-26T07:00:00Z","image":"https://jemgunay.co.uk/p/bottle-classifier-cocktail-resolver/preview_hu3115684783993511896.png","permalink":"https://jemgunay.co.uk/p/bottle-classifier-cocktail-resolver/","title":"Bottle Classifier \u0026 Cocktail Resolver"},{"content":"See the GitHub repository here.\nAs a follow-up to Part 1, I decided to rewrite the orbital planet simulation from scratch, this time scrapping the physics library and instead implementing my own physics. On launch, three galaxies consisting of around 100 planets each are spawned which orbit a larger planet sitting at the centre of their galaxy. These planets are all gravitationally attracted towards each other and deflect on collision.\nEach planet has a randomised size, shape and texture; smaller planets are given an initial impulse to push them into an orbit. The controllable rocket can be used to navigate the cosmos and its physics are also simulated; the rocket vector graphic was created in Adobe Illustrator.\nThe simulation can be seen in action below:\n","date":"2017-09-26T00:00:00Z","image":"https://jemgunay.co.uk/p/orbital-simulation-part-2/preview_hu7924589907642329714.jpg","permalink":"https://jemgunay.co.uk/p/orbital-simulation-part-2/","title":"C++ Orbital Simulation (Part 2)"},{"content":"See the GitHub repository here.\nI took a Bioinformatics module which explores the development of methods and software tools for understanding biological data. I was tasked with producing a tool that searches a protein sequence for any matched motifs, providing the position of each motif found. In particular, the tool had to detect regions of protein sequences which could form amyloid associations; these have been associated with neurodegenerative diseases such as Alzheimer’s disease and Parkinson’s disease.\nUser provided input can consist of either a UniProt Accessor Code or a FASTA-Formatted Protein Sequence and will result in the output of the UniProt Accessor Code, the FASTA-Formatted Protein Sequence, the Protein Name and the corresponding Sequence Motif Matches. The tool has two main functions; the ability to search a singular protein sequence for patterns and the ability to search through a batch of protein sequences by their UniProt Accessor Codes all at once. For both functions, there are example inputs and options to clear input and output. The search algorithm and input validations utilise regular expressions to search for relevant motifs and to prevent malformed user input from leading to undesirable results or performance.\nThe tool was developed using Python 2.7, as well as HTML5, CSS3 and JavaScript. The Bootstrap front-end framework was used to design the front-end of the system efficiently and the jQuery library was used to write more elegant dynamic code. It can run offline on local web servers which allow the execution of Python files via CGI (Common Gateway Interface) assuming sufficient permissions have been set.\n","date":"2017-01-10T20:40:38Z","image":"https://jemgunay.co.uk/p/protein-sequence-motif-search-tool/preview_hu6333219556744827762.jpg","permalink":"https://jemgunay.co.uk/p/protein-sequence-motif-search-tool/","title":"Protein Sequence Motif Search Tool"},{"content":"This classical maze game was developed during my university games computing module. It is written in C++ and compiled under Linux with g++, utilising the Ogre3D graphical library for rendering the scene (with its shipped OIS library for handling mouse and keyboard input) and ODE for simulating the game physics. The objective of the game will be to navigate your mouse character around a hedge maze to capture all of the collectable rotating cheese segments in the shortest time possible, with the ability to replay the same level in order to beat your previous time record. There is a graphical display of the number of cheese segments collected, the current time elapsed since starting the level and the previous record time. The game can be downloaded below.\nThe mouse was textured in Blender by unwrapping a sphere mesh and UV mapping a minimalistic mouse texture created in Photoshop to it. The Blender plug-in Blender RealXtend Tundra was then used to export the Blender mesh with UV co-ordinate data and the OgreCommandLineTools 1.7.2 set of scripts was used convert this into a .mesh file to be rendered by the Ogre3D engine. Blender was also used to model and texture the cheese segment asset. I created an interpreter to parse game level creating instructions from a text file in order to make creating new levels more efficient without having to recompile the game each time. It ignores new lines and comment lines prefixed with a hash character; this improves readability by making it easy to group and label sections of wall creation instructions together. This project encouraged me to learn how to utilise Makefiles in order more efficiently build C++ programs.\nExecute MazeGame to launch the game. WASD or arrow keys to roll the mouse. Escape key to exit the game. Built on Ubuntu 14.04. Dependencies: Ogre3D 1.9 TODO: Click to download\n","date":"2017-01-10T15:59:54Z","image":"https://jemgunay.co.uk/p/mousey-maze-game/preview_hu2920709566058590335.png","permalink":"https://jemgunay.co.uk/p/mousey-maze-game/","title":"C++ Mousey Maze Game"},{"content":"Now that the framework for the turret movement was sorted, I moved onto the video streaming functionality. This was implemented by creating a web application using the Flask framework to serve the video stream one frame at a time to the user’s browser by reading an image from the Pi Camera and encoding it with appropriate headers before sending it as a response. When a user clicks a command button, a request is received by the server, and the desired action is carried out by the hardware manipulating Python classes such as stepping the servo to aim vertically, applying power to the motor to turn the turret horizontally or firing the gun. Basic access authentication is forced so that only users who have been provided with the username/password combination can access the turret’s stream.\nIn order to make connecting to the Raspberry Pi Flask server more straightforward, the Python script also sends a request to my external testing server which hosts a PHP script; this script logs the public IP address of the Pi and displays it to the user, allowing them to be able to access the turret’s stream (assuming the Pi is connected to a router which has its private IP port forwarded). Last but not least, the Bagel Turret wouldn’t be a Bagel Turret without a few bagels – the favicon is a tiny bagel and the web page for displaying the Raspberry Pi’s public IP address features a full size bagel just in case someone is uncertain about the purpose of the page.\nGitHub project repository\nClick here to read part 1!\n","date":"2016-09-22T23:05:44Z","image":"https://jemgunay.co.uk/p/bagel-turret-remote-surveillance-turret-part-2/preview_hu14435327745985299173.png","permalink":"https://jemgunay.co.uk/p/bagel-turret-remote-surveillance-turret-part-2/","title":"Bagel Turret: Remote Surveillance Turret (Part 2)"},{"content":"See the GitHub repository here.\nMy flat mates and I were fooling around with some cheap BB guns and an fun idea dawned on me: to build an automatic surveillance turret! I wanted to develop a web interface for controlling the aiming and firing of the turret and could then apply computer vision technologies to detect and aim for specific targets to test the accuracy of the gun.\nI dug out my old childhood Meccano set which would be used to construct a frame to mount the gun and electronics onto. I searched online for a cheap electric BB gun that would be easy to modify; I went with the automatic CYBER STRYKE X4 BB gun as it was cheap and had a semi-transparent housing, meaning I would be able to locate the electronics and firing mechanisms with ease. Having experimented with OpenCV on my old original Raspberry Pi, I soon realised that if I wanted to stream the turret’s view to a web interface in real time with minimum lag, as well as perform object classification/detection, I would have to invest in a Raspberry Pi 3 which has significantly more processing power. I already had a NOIR Pi Camera which I will use for now to stream the turret\u0026rsquo;s view - I may get a standard Pi Camera when I reach the computer vision implementation phase as the colourisation from the IR light may impact upon accuracy.\nA cheap hobby motor was used to control the horizontal rotation and a servo was used to control the vertical aiming. I hacked together a couple of gears to reduce the load on the motor and glue-gunned a retractable arm to the servo and attached the other end to the gun, allowing the arm to extend and retract when the servo changes orientation. The servo was wired directly to the Pi\u0026rsquo;s 5V output, though the motor required more power; by using an L293D Motor Driver IC, I was able to supply power via a 9V battery to the motor whilst providing easier control over the motor\u0026rsquo;s direction of rotation. Short python classes were then written to interface with the motor and servo, making it easier for me to test how well they functioned under the weight of the gun. The servo struggled to sustain the weight of the gun so I trimmed off the extra aesthetic plastic housing and removed the battery storage section towards the back – this can be repositioned elsewhere on the turret frame reducing the load on the servo. Despite these modifications, sharp movements caused the unstable Meccano base to wobble; I decided to build a new bottom base out of wood to structure the rest of the Meccano frame onto.\nA further python script was then programmed to create a simple demo to show off the horizontal and vertical aiming capabilities - this can be seen in action below. The Python scripts for this project can be found on GitHub below.\nClick here to read part 2!\n","date":"2016-09-22T20:50:15Z","image":"https://jemgunay.co.uk/p/bagel-turret-remote-surveillance-turret-part-1/preview_hu12564077151824405096.png","permalink":"https://jemgunay.co.uk/p/bagel-turret-remote-surveillance-turret-part-1/","title":"Bagel Turret: Remote Surveillance Turret (Part 1)"},{"content":"I took a module at university focussing on 3D modelling techniques which gave me the opportunity to create a realistic and substantial model of a photographed object. I had to create an animation including the model and had to produce a Python script which manipulated the scene in some way. I settled on modelling my chess board/pieces, sculpting them to scale and texturing them realistically.\nI animated the camera panning in towards the chess board as the piece storage draws open; a game is played by invisible players, taking turns one move at a time. Once a king is in check mate, he explodes out of shame, scattering shards of himself across the scene. This was achieved using Blender\u0026rsquo;s Cell Fracture add-on.\nThe Python script randomises the positions and orientations of all chess pieces on their side of the board, creating a new game scenario. However, the script does not respect the rules of chess, meaning unrealistic and impossible game scenarios can be generated. Within Blender, the user can move a chess piece from one of the storage trays above the board and execute the script; this causes the piece to be included in the new randomised game scene. When a piece is moved below the top of the board, it is excluded from the game scene.\n","date":"2016-09-19T04:35:45Z","image":"https://jemgunay.co.uk/p/blender-3d-modelled-chess-board/preview_hu8416017528331335463.png","permalink":"https://jemgunay.co.uk/p/blender-3d-modelled-chess-board/","title":"Blender 3D Modelled Chess Board"},{"content":"Simple use of recursion to make a warped tunnelling effect with circles using Processing. Processing sketch/source and compiled executable can be found below.\nStarts off slowly iterating over the four different rendering modes. Use keys 1, 2, 3 and 4 to change the visual/render mode (dynamic rainbow, static rainbow, dynamic greyscale, static greyscale). Use left and right arrow keys to switch to a different motion path (there are 4 motion paths, each with varied use of the trigonometric functions sin, cos and tan). TODO: Click to download application \u0026amp; source files\n","date":"2016-09-19T03:19:37Z","image":"https://jemgunay.co.uk/p/trippy-recursive-circles-in-processing/preview_hu12116508157264676654.png","permalink":"https://jemgunay.co.uk/p/trippy-recursive-circles-in-processing/","title":"Trippy Recursive Circles in Processing"},{"content":"I wanted to make a photo frame gift more interesting, so added an ambient lighting effect by attaching a small circuit to the back of the frame. Initially powered by an Arduino Uno, the C++ code controlling the timing of the RGB LEDs was recompiled for an ATtiny45 microcontroller (enabling AA battery power) to significantly reduced the project’s physical size, cost, and power consumption. The red, green, and blue LEDs can produce a smooth transition across most of the visible light spectrum with vibrant intensity which refracts nicely to illuminate the glass frame and backdrop.\n","date":"2016-09-19T02:59:59Z","image":"https://jemgunay.co.uk/p/ambient-lighting-photo-frame/preview_hu14451636956945056539.png","permalink":"https://jemgunay.co.uk/p/ambient-lighting-photo-frame/","title":"Ambient Lighting Photo Frame"},{"content":"My little brother and sister (aged 7 and 8 at the time) wanted a more motivational way to practice their times tables for their school homework. They are obsessed with the popular game Minecraft, so I combined the two!\nOptions to select multiple tables to practice with randomised question order. Optional timer to speed up the pace of a game. Summary at the end with correctly and incorrectly answered questions with their solutions. Characters from the game pop in and out at random areas and timings around the screen, with sounds and textures from the game recycled throughout. TODO: Add SWF screenshots here. TODO: Add SWF download.\n","date":"2016-09-18T21:51:56Z","image":"https://jemgunay.co.uk/p/flash-tables-craft-childrens-game/preview_hu1612288489805782996.png","permalink":"https://jemgunay.co.uk/p/flash-tables-craft-childrens-game/","title":"Flash Tables Craft Children's Game"},{"content":"I was curious about using the Box2D physics engine to simulate orbital physics, inspired by the gravitational pull mechanic of the planets in Angry Birds Space. The SFML library was used to draw the planets in the simulation. Planet Earth is fixed to the centre of space, with a variable number of square and triangular satellites orbiting around it; for each satellite spawned, an impulse sized relative to the distance from the central planet is applied to launch it in a random direction, but with a velocity which guides the satellite into a stable orbit. I decided to use an abstract but clean style to make the simulation more interesting and satisfying to watch.\nThere are options to create and destroy satellites, which can in turn be dragged around with the mouse - a challenge is to try and throw the satellites back into a successful orbit. There are also controls for zooming and enabling/disabling the gravitational field which creates a gradual scattering effect. I intend to revisit the orbital test to create a more realistic and complex simulation or game.\nThe simulation can be seen in action below, followed by the program download link.\nTODO: Click to download\n","date":"2016-09-18T21:05:26Z","image":"https://jemgunay.co.uk/p/orbital-simulation-part-1/preview_hu6010345720037865037.png","permalink":"https://jemgunay.co.uk/p/orbital-simulation-part-1/","title":"C++ Orbital Simulation (Part 1)"},{"content":"This is one of the first large projects I worked on when starting out with AS3. I worked on this with two friends; I wrote the code, Matty created the majority of the graphics and Reuben provided ideas and tested the game. I wanted to read into multiplayer game development so took a look at Player.IO. By writing AS3 client side code and C# server side code tests, I implemented the API with a basic blocky terrain generation algorithm I had been working on to create a basic multiplayer base. We then decided to expand on this by creating a Minecraft/Terraria inspired side-scroller with dwarves who explore and destroy the terrain.\nAlthough basic and occasionally buggy, it has a great deal of character and I\u0026rsquo;m proud to call it a first major completed project.\nEnter your name and select one of the two dwarf characters to join the game. Normal biomes have mushrooms and exploding pumpkins. Snowy biomes have a destructible snowman. WASD or ARROWS to move, CTRL + Left Click to remove block (temperamental), type /help in chat for commands. Enter to send a message in chat. TODO: Add SWF screenshots here. TODO: Add SWF download.\n","date":"2016-09-18T20:03:23Z","image":"https://jemgunay.co.uk/p/flash-multiplayer-dwarf-game/preview_hu5832402397870827401.png","permalink":"https://jemgunay.co.uk/p/flash-multiplayer-dwarf-game/","title":"Flash Multiplayer Dwarf Game"}]